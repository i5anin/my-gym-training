import * as fs from "fs/promises";
import * as path from "path";
import { fileURLToPath } from "url";

// –ü–æ–ª—É—á–∞–µ–º –ø—É—Ç—å –∫ —Ç–µ–∫—É—â–µ–º—É —Ñ–∞–π–ª—É –∏ –µ–≥–æ –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏–∏
const __filename = fileURLToPath(import.meta.url);
const __dirname = path.dirname(__filename);

// –§—É–Ω–∫—Ü–∏—è –¥–ª—è —Ä–µ–∫—É—Ä—Å–∏–≤–Ω–æ–≥–æ –æ–±—Ö–æ–¥–∞ –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏–π
const readDirectory = async (dir) => {
  try {
    const files = await fs.readdir(dir);

    for (const file of files) {
      const filePath = path.join(dir, file);

      try {
        const stats = await fs.stat(filePath);

        if (stats.isDirectory()) {
          // –ï—Å–ª–∏ —ç—Ç–æ –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏—è, —Ä–µ–∫—É—Ä—Å–∏–≤–Ω–æ –æ–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º –µ—ë
          console.log(`üìÇ –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏—é: ${filePath}`);
          await readDirectory(filePath);
        } else {
          const isTextFile = /\.(txt|md|js|ts|json|html|css|vue)$/i.test(file);

          if (isTextFile) {
            console.log(`üìú ${file}`);

            try {
              const content = await fs.readFile(filePath, "utf8");
              console.log("üîç –°–æ–¥–µ—Ä–∂–∏–º–æ–µ:");
              console.log(content.substring(0, 5000)); // –û–≥—Ä–∞–Ω–∏—á–∏–≤–∞–µ–º –≤—ã–≤–æ–¥ 5000 —Å–∏–º–≤–æ–ª–∞–º–∏
              console.log("‚Äî".repeat(50));
            } catch (error) {
              console.error(`‚ùå –û—à–∏–±–∫–∞ —á—Ç–µ–Ω–∏—è —Ñ–∞–π–ª–∞ ${file}:`, error.message);
            }
          } else {
            console.log(`üìÅ –ü—Ä–æ–ø—É—Å–∫–∞–µ–º –±–∏–Ω–∞—Ä–Ω—ã–π —Ñ–∞–π–ª: ${file}`);
          }
        }
      } catch (error) {
        console.error(`‚ùå –û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –æ —Ñ–∞–π–ª–µ ${file}:`, error);
      }
    }
  } catch (err) {
    console.error("‚ùå –û—à–∏–±–∫–∞ —á—Ç–µ–Ω–∏—è –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏–∏:", err);
  }
};

// –ß–∏—Ç–∞–µ–º –ø—É—Ç–∏ –∏–∑ —Ñ–∞–π–ª–∞
const readDirectoriesFromFile = async (filePath) => {
  try {
    const data = await fs.readFile(filePath, "utf8");
    const directories = data
        .split("\n")
        .map((line) => line.trim())
        .filter(Boolean); // –†–∞–∑–¥–µ–ª—è–µ–º –ø–æ —Å—Ç—Ä–æ–∫–∞–º –∏ —É–±–∏—Ä–∞–µ–º –ø—É—Å—Ç—ã–µ —Å—Ç—Ä–æ–∫–∏

    for (const dirOrFile of directories) {
      try {
        const stats = await fs.stat(dirOrFile);

        if (stats.isDirectory()) {
          console.log(`üìÇ –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏—é: ${dirOrFile}`);
          await readDirectory(dirOrFile);
        } else if (stats.isFile()) {
          const isTextFile = /\.(txt|md|js|ts|json|html|css|vue)$/i.test(dirOrFile);

          if (isTextFile) {
            console.log(`üìú ${dirOrFile}`);

            try {
              const content = await fs.readFile(dirOrFile, "utf8");
              console.log("üîç –°–æ–¥–µ—Ä–∂–∏–º–æ–µ:");
              console.log(content.substring(0, 5000)); // –û–≥—Ä–∞–Ω–∏—á–∏–≤–∞–µ–º –≤—ã–≤–æ–¥ 5000 —Å–∏–º–≤–æ–ª–∞–º–∏
              console.log("‚Äî".repeat(50));
            } catch (error) {
              console.error(`‚ùå –û—à–∏–±–∫–∞ —á—Ç–µ–Ω–∏—è —Ñ–∞–π–ª–∞ ${dirOrFile}:`, error.message);
            }
          } else {
            console.log(`üìÅ –ü—Ä–æ–ø—É—Å–∫–∞–µ–º –±–∏–Ω–∞—Ä–Ω—ã–π —Ñ–∞–π–ª: ${dirOrFile}`);
          }
        }
      } catch (error) {
        console.error("‚ùå –û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –æ –ø—É—Ç–∏:", error);
      }
    }
  } catch (err) {
    console.error("‚ùå –û—à–∏–±–∫–∞ —á—Ç–µ–Ω–∏—è —Ñ–∞–π–ª–∞ —Å –ø—É—Ç—è–º–∏:", err);
  }
};

// –£–∫–∞–∑—ã–≤–∞–µ–º –ø—É—Ç—å –∫ —Ñ–∞–π–ª—É —Å –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏—è–º–∏ –∏ —Ñ–∞–π–ª–∞–º–∏
const directoriesFile = "dirs.txt";

// –ß–∏—Ç–∞–µ–º –ø—É—Ç–∏ –∏–∑ —Ñ–∞–π–ª–∞
await readDirectoriesFromFile(directoriesFile);
