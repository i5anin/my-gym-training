import * as fs from "fs";
import * as path from "path";
import { fileURLToPath } from "url";

// –ü–æ–ª—É—á–∞–µ–º –ø—É—Ç—å –∫ —Ç–µ–∫—É—â–µ–º—É —Ñ–∞–π–ª—É –∏ –µ–≥–æ –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏–∏
const __filename = fileURLToPath(import.meta.url);
const __dirname = path.dirname(__filename);

// –§—É–Ω–∫—Ü–∏—è –¥–ª—è —Ä–µ–∫—É—Ä—Å–∏–≤–Ω–æ–≥–æ –æ–±—Ö–æ–¥–∞ –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏–π
const readDirectory = (dir) => {
  fs.readdir(dir, (err, files) => {
    if (err) {
      console.error("‚ùå –û—à–∏–±–∫–∞ —á—Ç–µ–Ω–∏—è –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏–∏:", err);
      return;
    }

    files.forEach((file) => {
      const filePath = path.join(dir, file);

      fs.stat(filePath, (err, stats) => {
        if (err) {
          console.error(`‚ùå –û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –æ —Ñ–∞–π–ª–µ ${file}:`, err);
          return;
        }

        if (stats.isDirectory()) {
          // –ï—Å–ª–∏ —ç—Ç–æ –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏—è, —Ä–µ–∫—É—Ä—Å–∏–≤–Ω–æ –æ–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º –µ—ë
          readDirectory(filePath);
        } else {
          const icon = "üìú"; // –í—Å–µ–≥–¥–∞ –∏–∫–æ–Ω–∫–∞ üìú

          // –ü—Ä–æ–≤–µ—Ä—è–µ–º, —è–≤–ª—è–µ—Ç—Å—è –ª–∏ —Ñ–∞–π–ª —Ç–µ–∫—Å—Ç–æ–≤—ã–º
          const isTextFile = /\.(txt|md|js|ts|json|html|css)$/i.test(file);

          if (isTextFile) {
            console.log(`${icon} ${file}`);

            // –ß–∏—Ç–∞–µ–º —Å–æ–¥–µ—Ä–∂–∏–º–æ–µ —Ç–µ–∫—Å—Ç–æ–≤–æ–≥–æ —Ñ–∞–π–ª–∞ (–¥–æ 5000 —Å–∏–º–≤–æ–ª–æ–≤)
            try {
              const content = fs.readFileSync(filePath, "utf8");
              console.log("üîç –°–æ–¥–µ—Ä–∂–∏–º–æ–µ:");
              console.log(content.substring(0, 5000)); // –û–≥—Ä–∞–Ω–∏—á–∏–≤–∞–µ–º –≤—ã–≤–æ–¥ 5000 —Å–∏–º–≤–æ–ª–∞–º–∏
              console.log("‚Äî".repeat(50));
            } catch (error) {
              console.error(`‚ùå –û—à–∏–±–∫–∞ —á—Ç–µ–Ω–∏—è —Ñ–∞–π–ª–∞ ${file}:`, error.message);
            }
          } else {
            // –ï—Å–ª–∏ —Ñ–∞–π–ª –Ω–µ —Ç–µ–∫—Å—Ç–æ–≤—ã–π, –ø—Ä–æ–ø—É—Å–∫–∞–µ–º –µ–≥–æ
            console.log(`üìÅ –ü—Ä–æ–ø—É—Å–∫–∞–µ–º –±–∏–Ω–∞—Ä–Ω—ã–π —Ñ–∞–π–ª: ${file}`);
          }
        }
      });
    });
  });
};

// –ß–∏—Ç–∞–µ–º –ø—É—Ç–∏ –∏–∑ —Ñ–∞–π–ª–∞
const readDirectoriesFromFile = (filePath) => {
  fs.readFile(filePath, "utf8", (err, data) => {
    if (err) {
      console.error("‚ùå –û—à–∏–±–∫–∞ —á—Ç–µ–Ω–∏—è —Ñ–∞–π–ª–∞ —Å –ø—É—Ç—è–º–∏:", err);
      return;
    }

    const directories = data
      .split("\n")
      .map((line) => line.trim())
      .filter(Boolean); // –†–∞–∑–¥–µ–ª—è–µ–º –ø–æ —Å—Ç—Ä–æ–∫–∞–º –∏ —É–±–∏—Ä–∞–µ–º –ø—É—Å—Ç—ã–µ —Å—Ç—Ä–æ–∫–∏

    // –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º –≤—Å–µ —É–∫–∞–∑–∞–Ω–Ω—ã–µ –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏–∏ –∏ —Ñ–∞–π–ª—ã
    directories.forEach((dirOrFile) => {
      fs.stat(dirOrFile, (err, stats) => {
        if (err) {
          console.error("‚ùå –û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –æ –ø—É—Ç–∏:", err);
          return;
        }

        if (stats.isDirectory()) {
          console.log(`üìÇ –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏—é: ${dirOrFile}`);
          readDirectory(dirOrFile);
        } else if (stats.isFile()) {
          const icon = "üìú"; // –í—Å–µ–≥–¥–∞ –∏–∫–æ–Ω–∫–∞ üìú
          console.log(`${icon} ${dirOrFile}`);

          // –ü—Ä–æ–≤–µ—Ä—è–µ–º, —è–≤–ª—è–µ—Ç—Å—è –ª–∏ —Ñ–∞–π–ª —Ç–µ–∫—Å—Ç–æ–≤—ã–º
          const isTextFile = /\.(txt|md|js|ts|json|html|css)$/i.test(dirOrFile);

          if (isTextFile) {
            // –ß–∏—Ç–∞–µ–º —Å–æ–¥–µ—Ä–∂–∏–º–æ–µ —Ç–µ–∫—Å—Ç–æ–≤–æ–≥–æ —Ñ–∞–π–ª–∞ (–¥–æ 5000 —Å–∏–º–≤–æ–ª–æ–≤)
            try {
              const content = fs.readFileSync(dirOrFile, "utf8");
              console.log("üîç –°–æ–¥–µ—Ä–∂–∏–º–æ–µ:");
              console.log(content.substring(0, 5000)); // –û–≥—Ä–∞–Ω–∏—á–∏–≤–∞–µ–º –≤—ã–≤–æ–¥ 5000 —Å–∏–º–≤–æ–ª–∞–º–∏
              console.log("‚Äî".repeat(50));
            } catch (error) {
              console.error(
                `‚ùå –û—à–∏–±–∫–∞ —á—Ç–µ–Ω–∏—è —Ñ–∞–π–ª–∞ ${dirOrFile}:`,
                error.message
              );
            }
          } else {
            console.log(`üìÅ –ü—Ä–æ–ø—É—Å–∫–∞–µ–º –±–∏–Ω–∞—Ä–Ω—ã–π —Ñ–∞–π–ª: ${dirOrFile}`);
          }
        }
      });
    });
  });
};

// –£–∫–∞–∑—ã–≤–∞–µ–º –ø—É—Ç—å –∫ —Ñ–∞–π–ª—É —Å –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏—è–º–∏ –∏ —Ñ–∞–π–ª–∞–º–∏
const directoriesFile = "dirs.txt";

// –ß–∏—Ç–∞–µ–º –ø—É—Ç–∏ –∏–∑ —Ñ–∞–π–ª–∞
readDirectoriesFromFile(directoriesFile);
